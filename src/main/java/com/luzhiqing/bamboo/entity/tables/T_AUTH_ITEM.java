/*
 * This file is generated by jOOQ.
*/
package com.luzhiqing.bamboo.entity.tables;


import com.luzhiqing.bamboo.entity.BambooAuth;
import com.luzhiqing.bamboo.entity.Indexes;
import com.luzhiqing.bamboo.entity.Keys;
import com.luzhiqing.bamboo.entity.tables.records.TAuthItemRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * 系统权限
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class T_AUTH_ITEM extends TableImpl<TAuthItemRecord> {

    private static final long serialVersionUID = -1544496252;

    /**
     * The reference instance of <code>bamboo_auth.t_auth_item</code>
     */
    public static final T_AUTH_ITEM T_AUTH_ITEM = new T_AUTH_ITEM();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAuthItemRecord> getRecordType() {
        return TAuthItemRecord.class;
    }

    /**
     * The column <code>bamboo_auth.t_auth_item.id</code>. 自增id
     */
    public final TableField<TAuthItemRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "自增id");

    /**
     * The column <code>bamboo_auth.t_auth_item.sys_id</code>. 系统id
     */
    public final TableField<TAuthItemRecord, UByte> SYS_ID = createField("sys_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "系统id");

    /**
     * The column <code>bamboo_auth.t_auth_item.menu_id</code>. 页面/接口uri
     */
    public final TableField<TAuthItemRecord, String> MENU_ID = createField("menu_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "页面/接口uri");

    /**
     * The column <code>bamboo_auth.t_auth_item.create_time</code>.
     */
    public final TableField<TAuthItemRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.create_user</code>.
     */
    public final TableField<TAuthItemRecord, Integer> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.create_user_name</code>.
     */
    public final TableField<TAuthItemRecord, String> CREATE_USER_NAME = createField("create_user_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.update_time</code>.
     */
    public final TableField<TAuthItemRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.update_user</code>.
     */
    public final TableField<TAuthItemRecord, Integer> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.update_user_name</code>.
     */
    public final TableField<TAuthItemRecord, String> UPDATE_USER_NAME = createField("update_user_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.delete_time</code>.
     */
    public final TableField<TAuthItemRecord, LocalDateTime> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.delete_user</code>.
     */
    public final TableField<TAuthItemRecord, Integer> DELETE_USER = createField("delete_user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.delete_user_name</code>.
     */
    public final TableField<TAuthItemRecord, String> DELETE_USER_NAME = createField("delete_user_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_item.enabled</code>.
     */
    public final TableField<TAuthItemRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>bamboo_auth.t_auth_item</code> table reference
     */
    public T_AUTH_ITEM() {
        this(DSL.name("t_auth_item"), null);
    }

    /**
     * Create an aliased <code>bamboo_auth.t_auth_item</code> table reference
     */
    public T_AUTH_ITEM(String alias) {
        this(DSL.name(alias), T_AUTH_ITEM);
    }

    /**
     * Create an aliased <code>bamboo_auth.t_auth_item</code> table reference
     */
    public T_AUTH_ITEM(Name alias) {
        this(alias, T_AUTH_ITEM);
    }

    private T_AUTH_ITEM(Name alias, Table<TAuthItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private T_AUTH_ITEM(Name alias, Table<TAuthItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "系统权限");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BambooAuth.BAMBOO_AUTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_AUTH_ITEM_IDX_SYS_MENU, Indexes.T_AUTH_ITEM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TAuthItemRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_T_AUTH_ITEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TAuthItemRecord> getPrimaryKey() {
        return Keys.KEY_T_AUTH_ITEM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TAuthItemRecord>> getKeys() {
        return Arrays.<UniqueKey<TAuthItemRecord>>asList(Keys.KEY_T_AUTH_ITEM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public T_AUTH_ITEM as(String alias) {
        return new T_AUTH_ITEM(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public T_AUTH_ITEM as(Name alias) {
        return new T_AUTH_ITEM(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public T_AUTH_ITEM rename(String name) {
        return new T_AUTH_ITEM(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public T_AUTH_ITEM rename(Name name) {
        return new T_AUTH_ITEM(name, null);
    }
}
