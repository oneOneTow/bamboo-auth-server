/*
 * This file is generated by jOOQ.
*/
package com.luzhiqing.bamboo.entity.tables;


import com.luzhiqing.bamboo.entity.BambooAuth;
import com.luzhiqing.bamboo.entity.Indexes;
import com.luzhiqing.bamboo.entity.Keys;
import com.luzhiqing.bamboo.entity.tables.records.TAuthRoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 员工角色
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAuthRole extends TableImpl<TAuthRoleRecord> {

    private static final long serialVersionUID = 519247306;

    /**
     * The reference instance of <code>bamboo_auth.t_auth_role</code>
     */
    public static final TAuthRole T_AUTH_ROLE = new TAuthRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAuthRoleRecord> getRecordType() {
        return TAuthRoleRecord.class;
    }

    /**
     * The column <code>bamboo_auth.t_auth_role.id</code>. 自增id
     */
    public final TableField<TAuthRoleRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "自增id");

    /**
     * The column <code>bamboo_auth.t_auth_role.role_name</code>. 角色名称
     */
    public final TableField<TAuthRoleRecord, String> ROLE_NAME = createField("role_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "角色名称");

    /**
     * The column <code>bamboo_auth.t_auth_role.role_desc</code>. 角色描述
     */
    public final TableField<TAuthRoleRecord, String> ROLE_DESC = createField("role_desc", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "角色描述");

    /**
     * The column <code>bamboo_auth.t_auth_role.auth_item_set</code>. 权限集合 多个值,号隔开
     */
    public final TableField<TAuthRoleRecord, String> AUTH_ITEM_SET = createField("auth_item_set", org.jooq.impl.SQLDataType.CLOB, this, "权限集合 多个值,号隔开");

    /**
     * The column <code>bamboo_auth.t_auth_role.create_time</code>.
     */
    public final TableField<TAuthRoleRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.create_user</code>.
     */
    public final TableField<TAuthRoleRecord, Integer> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.create_user_name</code>.
     */
    public final TableField<TAuthRoleRecord, String> CREATE_USER_NAME = createField("create_user_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.update_time</code>.
     */
    public final TableField<TAuthRoleRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.update_user</code>.
     */
    public final TableField<TAuthRoleRecord, Integer> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.update_user_name</code>.
     */
    public final TableField<TAuthRoleRecord, String> UPDATE_USER_NAME = createField("update_user_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.delete_time</code>.
     */
    public final TableField<TAuthRoleRecord, LocalDateTime> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.delete_user</code>.
     */
    public final TableField<TAuthRoleRecord, Integer> DELETE_USER = createField("delete_user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.delete_user_name</code>.
     */
    public final TableField<TAuthRoleRecord, String> DELETE_USER_NAME = createField("delete_user_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>bamboo_auth.t_auth_role.enabled</code>.
     */
    public final TableField<TAuthRoleRecord, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>bamboo_auth.t_auth_role</code> table reference
     */
    public TAuthRole() {
        this(DSL.name("t_auth_role"), null);
    }

    /**
     * Create an aliased <code>bamboo_auth.t_auth_role</code> table reference
     */
    public TAuthRole(String alias) {
        this(DSL.name(alias), T_AUTH_ROLE);
    }

    /**
     * Create an aliased <code>bamboo_auth.t_auth_role</code> table reference
     */
    public TAuthRole(Name alias) {
        this(alias, T_AUTH_ROLE);
    }

    private TAuthRole(Name alias, Table<TAuthRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAuthRole(Name alias, Table<TAuthRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "员工角色");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BambooAuth.BAMBOO_AUTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_AUTH_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TAuthRoleRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_T_AUTH_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TAuthRoleRecord> getPrimaryKey() {
        return Keys.KEY_T_AUTH_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TAuthRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<TAuthRoleRecord>>asList(Keys.KEY_T_AUTH_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAuthRole as(String alias) {
        return new TAuthRole(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAuthRole as(Name alias) {
        return new TAuthRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAuthRole rename(String name) {
        return new TAuthRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAuthRole rename(Name name) {
        return new TAuthRole(name, null);
    }
}
